[gd_scene load_steps=9 format=3 uid="uid://j1o5cgx2asd1"]

[ext_resource type="Script" uid="uid://eyp4y4tvjage" path="res://levels/multiplayer_V/scripts/multiplayer_character_V.gd" id="1_fk2gv"]
[ext_resource type="Script" uid="uid://b0wkeoc07cjun" path="res://levels/multiplayer_V/scripts/player_auth_sync_V.gd" id="2_bi32m"]
[ext_resource type="Script" uid="uid://dbc7b35usypyr" path="res://addons/property_selection_window/essentials/PropertySelector.gd" id="3_6lmhl"]
[ext_resource type="Script" uid="uid://daebidd3on647" path="res://levels/multiplayer_V/scripts/some_silly_test_mesh.gd" id="3_bi32m"]

[sub_resource type="Resource" id="Resource_6lmhl"]
script = ExtResource("3_6lmhl")
target_path = NodePath("")
properties_list = Array[String]([])
metadata/_custom_type_script = "uid://dbc7b35usypyr"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_fns6b"]

[sub_resource type="CapsuleMesh" id="CapsuleMesh_bglo7"]
radial_segments = 12
rings = 3

[sub_resource type="GDScript" id="GDScript_6lmhl"]
script/source = "extends Node

## This was just a test to make sure MinHeap works correctly.

var heap :MinHeap =  MinHeap.new()

var actually_heap: Array[Temps]

func _enter_tree():
  #actually_heap.append(nt(100))
  #actually_heap.append(nt(45))
  #actually_heap.append(nt(12))
  #actually_heap.append(nt(8))
  #actually_heap.append(nt(87))
  #actually_heap.append(nt(14))
  #actually_heap.append(nt(21))
  #actually_heap.append(nt(34))
  #actually_heap.append(nt(99))
  #actually_heap.append(nt(12))
  #actually_heap.append(nt(3))
  #
  heap.insert(nt(100))
  heap.insert(nt(45))
  heap.insert(nt(12))
  heap.insert(nt(8))
  heap.insert(nt(87))
  heap.insert(nt(14))
  heap.insert(nt(21))
  heap.insert(nt(34))
  heap.insert(nt(99))
  heap.insert(nt(12))
  heap.insert(nt(3))
  
  #heap.heap = actually_heap
  heap.heapify()
  heap._print()
  
  while(heap.heap.size()>0):
    var sml = heap.pop()
    print(sml)

func nt(i : int):
  var t = Temps.new()
  t.val = i
  return t

class Temps:
  @export var val: int
  func get_score():
    return val
  
  func _to_string():
    return str(get_score())
"

[node name="Character" type="CharacterBody3D"]
script = ExtResource("1_fk2gv")

[node name="Synchronizer" type="Node" parent="." node_paths=PackedStringArray("main_node", "mesh_instance")]
editor_description = "<Resource#-9223367802235029413>"
script = ExtResource("2_bi32m")
main_node = NodePath("..")
mesh_instance = NodePath("../Mesh")
REF_test_prop = NodePath("../Mesh")
test_prop = SubResource("Resource_6lmhl")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
shape = SubResource("CapsuleShape3D_fns6b")

[node name="Mesh" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
mesh = SubResource("CapsuleMesh_bglo7")

[node name="someSillyTestMesh" type="MeshInstance3D" parent="."]
editor_description = "<Resource#-9223367827870627403>"
transform = Transform3D(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
rotation_order = 0
top_level = true
layers = 0
cast_shadow = 0
lod_bias = 0.0
ignore_occlusion_culling = true
gi_mode = 0
gi_lightmap_texel_scale = 0.0
skeleton = NodePath("")
script = ExtResource("3_bi32m")

[node name="Label" type="Label" parent="."]
offset_right = 40.0
offset_bottom = 23.0
text = "TEST THIS OUT"

[node name="Node" type="Node" parent="."]
script = SubResource("GDScript_6lmhl")
